"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureCypressAxe = exports.configureAxe = exports.injectAxe = exports.consoleReporter = void 0;
var utils_1 = require("./utils");
Object.defineProperty(exports, "consoleReporter", { enumerable: true, get: function () { return utils_1.consoleReporter; } });
var defaultCypressAxeConfig = {
    axeOptions: {},
    shouldFailFn: function (violations) { return violations; },
    violationsCb: utils_1.consoleReporter,
    skipFailures: false,
};
var injectAxe = function () {
    var fileName = typeof (require === null || require === void 0 ? void 0 : require.resolve) === 'function'
        ? require.resolve('axe-core/axe.min.js')
        : 'node_modules/axe-core/axe.min.js';
    cy.readFile(fileName).then(function (source) {
        return cy.window({ log: false }).then(function (window) {
            window.eval(source);
        });
    });
};
exports.injectAxe = injectAxe;
var configureAxe = function (configurationOptions) {
    if (configurationOptions === void 0) { configurationOptions = {}; }
    cy.window({ log: false }).then(function (win) {
        return win.axe.configure(configurationOptions);
    });
};
exports.configureAxe = configureAxe;
var configureCypressAxe = function (options) {
    defaultCypressAxeConfig = __assign(__assign({}, defaultCypressAxeConfig), options);
};
exports.configureCypressAxe = configureCypressAxe;
var checkA11y = function (params) {
    var context = params.context, label = params.label;
    var _a = __assign(__assign({}, defaultCypressAxeConfig), params.options), axeOptions = _a.axeOptions, shouldFailFn = _a.shouldFailFn, violationsCb = _a.violationsCb, skipFailures = _a.skipFailures;
    cy.window({ log: false })
        .then(function (win) {
        var subject = (0, utils_1.isEmptyOrNullObject)(context) ? undefined : context;
        return win.axe
            .run(subject || win.document, axeOptions)
            .then(function (_a) {
            var violations = _a.violations;
            return violations;
        });
    })
        .then(function (violations) { return shouldFailFn(violations); })
        .then(function (failableViolations) {
        if (failableViolations.length) {
            violationsCb({
                filename: Cypress.spec.name,
                results: failableViolations,
                label: label,
            });
        }
        return cy.wrap(failableViolations, { log: false });
    })
        .then(function (failableViolations) {
        if (!skipFailures) {
            (0, utils_1.assertViolations)(failableViolations);
        }
    });
};
Cypress.Commands.add('injectAxe', exports.injectAxe);
Cypress.Commands.add('configureAxe', exports.configureAxe);
Cypress.Commands.add('configureCypressAxe', exports.configureCypressAxe);
Cypress.Commands.add('checkA11y', 
// @ts-ignore
{ prevSubject: 'optional' }, function (context, options, label) {
    checkA11y({ context: context, options: options, label: label });
});
